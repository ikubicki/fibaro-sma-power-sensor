{"name":"SMA Power Sensor","type":"com.fibaro.powerSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_252"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"SMA Power Sensor","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Refresh","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_252"}}},"uiCallbacks":[{"callback":"button1Event","eventType":"onReleased","name":"button1"}],"quickAppVariables":[{"name":"URL","value":"-"},{"name":"Password","value":"-"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"--[[\nSMA power sensor\n@author ikubicki\n]]\n\nfunction QuickApp:onInit()\n    self.config = Config:new(self)\n    self.sma = SMA:new(self.config)\n\n    self.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    self:trace('')\n    self:trace(self.i18n:get('name'))\n    self:updateProperty('manufacturer', 'SMA')\n    self:updateProperty('manufacturer', 'Power sensor')\n    self:updateView(\"button1\", \"text\", self.i18n:get('refresh'))\n    self:run()\nend\n\nfunction QuickApp:run()\n    self:pullDataFromInverter()\n    local interval = self.config:getTimeoutInterval()\n    if (interval > 0) then\n        fibaro.setTimeout(interval, function() self:run() end)\n    end\nend\n\nfunction QuickApp:button1Event()\n    self:pullDataFromInverter()\nend\n\nfunction QuickApp:pullDataFromInverter()\n    self:updateView(\"button1\", \"text\", self.i18n:get('please-wait'))\n    local sid = false\n    local errorCallback = function(error)\n        self:updateView(\"button1\", \"text\", self.i18n:get('refresh'))\n        QuickApp:error(json.encode(error))\n    end\n    local logoutCallback = function()\n        self:updateView(\"label1\", \"text\", string.format(self.i18n:get('last-update'), os.date('%Y-%m-%d %H:%M:%S')))\n        self:updateView(\"button1\", \"text\", self.i18n:get('refresh'))\n        self:trace(self.i18n:get('device-updated'))\n    end\n    local valuesCallback = function(res)\n        if res and res.result then\n            for _, device in pairs(res.result) do\n                local power = device[SMA.POWER_CURRENT][\"1\"][1]['val']\n                self:updatePower(power)\n            end\n        end\n        self.sma:logout(sid, logoutCallback, errorCallback)\n    end\n    local loginCallback = function(sessionId)\n        sid = sessionId\n        self.sma:getValues(sid, {SMA.POWER_CURRENT}, valuesCallback, errorCallback)\n    end\n    self.sma:login(loginCallback, errorCallback)\nend\n\nfunction QuickApp:updatePower(power)\n    if power > 1000 then\n        self:updateProperty(\"value\", power / 1000) \n        self:updateProperty(\"unit\", \"KW\") \n    else\n        self:updateProperty(\"value\", power) \n        self:updateProperty(\"unit\", \"W\") \n    end\n    self:updateProperty(\"power\", power)\nend"},{"name":"i18n","isMain":false,"isOpen":true,"content":"--[[\r\nInternationalization tool\r\n@author ikubicki\r\n]]\r\nclass 'i18n'\r\n\r\nfunction i18n:new(langCode)\r\n    self.phrases = phrases[langCode]\r\n    return self\r\nend\r\n\r\nfunction i18n:get(key)\r\n    if self.phrases[key] then\r\n        return self.phrases[key]\r\n    end\r\n    return key\r\nend\r\n\r\nphrases = {\r\n    pl = {\r\n        ['name'] = 'SMA czujnik mocy PV',\r\n        ['refresh'] = 'Odśwież',\r\n        ['last-update'] = 'Ostatnia aktualizacja: %s',\r\n        ['please-wait'] = 'Proszę czekać...',\r\n        ['device-updated'] = 'Zaktualizowano dane czujnika',\r\n    },\r\n    en = {\r\n        ['name'] = 'SMA PV Power sensor',\r\n        ['refresh'] = 'Refresh',\r\n        ['last-update'] = 'Last update at %s',\r\n        ['please-wait'] = 'Please wait...',\r\n        ['device-updated'] = 'Sensor data updated',\r\n    },\r\n    de = {\r\n        ['name'] = 'SMA PV-Leistung sensor',\r\n        ['refresh'] = 'Aktualisieren',\r\n        ['last-update'] = 'Letztes update: %s',\r\n        ['please-wait'] = 'Ein moment bitte...',\r\n        ['device-updated'] = 'Sensor aktualisiert',\r\n    }\r\n}"},{"name":"HTTPClient","isMain":false,"isOpen":false,"content":"--[[\r\nHTTPClient wrapper\r\n@author ikubicki\r\n]]\r\nclass 'HTTPClient'\r\n\r\nfunction HTTPClient:new(options)\r\n    if not options then\r\n        options = {}\r\n    end\r\n    self.options = options\r\n    return self\r\nend\r\n\r\nfunction HTTPClient:get(url, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'GET', nil, headers)) \r\nend\r\n\r\nfunction HTTPClient:post(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers)) \r\nend\r\n\r\nfunction HTTPClient:postForm(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    headers[\"Content-Type\"] = 'application/x-www-form-urlencoded;charset=UTF-8'\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers, true)) \r\nend\r\n\r\nfunction HTTPClient:put(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data, headers)) \r\nend\r\n\r\nfunction HTTPClient:delete(url, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE', nil, headers)) \r\nend\r\n\r\nfunction HTTPClient:url(url)\r\n    if (string.sub(url, 0, 4) == 'http') then\r\n        return url\r\n    end\r\n    if not self.options.baseUrl then\r\n        self.options.baseUrl = 'http://localhost'\r\n    end\r\n    return self.options.baseUrl .. tostring(url)\r\nend\r\n\r\nfunction HTTPClient:requestOptions(success, error, method, data, headers, isFormData)\r\n    if error == nil then\r\n        error = function (error)\r\n            QuickApp:error(json.encode(error))\r\n        end\r\n    end\r\n    if method == nil then\r\n        method = 'GET'\r\n    end\r\n    local options = {\r\n        checkCertificate = false,\r\n        method = method,\r\n        headers = headers,\r\n    }\r\n    if data ~= nil then\r\n        if isFormData then\r\n            options.data = ''\r\n            for key, value in pairs(data) do\r\n                if string.len(options.data) > 0 then \r\n                    options.data = options.data .. '&'\r\n                end\r\n                options.data = options.data .. key .. '=' .. value\r\n            end\r\n        elseif type(data) == 'string' then\r\n            options.data = data\r\n        else\r\n            options.data = json.encode(data)\r\n        end\r\n    end\r\n    return {\r\n        options = options,\r\n        success = success,\r\n        error = error\r\n    }\r\nend"},{"name":"SMA","isMain":false,"isOpen":true,"content":"--[[\r\nSMA SDK\r\n@author ikubicki\r\n]]\r\nclass 'SMA'\r\n\r\nSMA.debug = false\r\n\r\nfunction SMA:new(config)\r\n    self.right = config:getRight('usr')\r\n    self.pass = config:getPassword()\r\n    self.sid = false\r\n    self.http = HTTPClient:new({\r\n        baseUrl = config:getUrl()\r\n    })\r\n    QuickApp:debug(config:getUrl())\r\n    return self\r\nend\r\n\r\nfunction SMA:login(callback, fail)\r\n    if self.sid then\r\n        self:logout(self.sid)\r\n    end\r\n    local sid = false\r\n    local error = function(err)\r\n        if sid then\r\n            self:logout(sid)\r\n        end\r\n        if fail ~= nil then\r\n            fail(err)\r\n        end\r\n    end\r\n    local success = function(response)\r\n        local data = string.gsub(response.data, \"null\", \"false\")\r\n        local json = json.decode(data)\r\n        if json.result then\r\n            sid = json.result.sid\r\n        end\r\n        if json.err == 503 then\r\n            error('Too many opened sessions!')\r\n            return false\r\n        end\r\n        \r\n        if sid then \r\n            self.sid = sid\r\n            if callback ~= nil then\r\n                callback(sid)\r\n            else\r\n                self:logout(sid)\r\n            end\r\n        else\r\n            error('Received error: ' .. json.err)\r\n        end\r\n    end\r\n    local data = {\r\n        right = self.right,\r\n        pass = self.pass\r\n    }\r\n    self.http:post('/dyn/login.json', data, success, error)\r\nend\r\n\r\nfunction SMA:getValues(sid, keys, callback, fail)\r\n    local error = function(error)\r\n        self:logout(sid)\r\n        if fail ~= nil then\r\n            fail(error)\r\n        end\r\n    end\r\n    local success = function(response)\r\n        local data = string.gsub(response.data, \"null\", \"0\") -- another hack\r\n        local json = json.decode(data)\r\n        if json then\r\n            if callback ~= nil then\r\n                callback(json)\r\n            else\r\n                self:logout(sid)\r\n            end\r\n        else\r\n            error()\r\n        end\r\n    end\r\n    local data = {\r\n        destDev = {},\r\n        keys = keys\r\n    }\r\n    self.values = {}\r\n    data = json.encode(data)\r\n    data = data:gsub(\"{}\", \"[]\") -- tiny hack\r\n    self.http:post('/dyn/getValues.json?sid=' .. sid, data, success, error)\r\nend\r\n\r\nfunction SMA:getLogger(sid, callback, fail)\r\n    local error = function(error)\r\n        self:logout(sid)\r\n        if fail ~= nil then\r\n            fail(error)\r\n        end\r\n    end\r\n    local success = function(response)\r\n        local data = string.gsub(response.data, \"null\", \"0\") -- another hack\r\n        local json = json.decode(data)\r\n        if json then\r\n            if callback ~= nil then\r\n                callback(json)\r\n            else\r\n                self:logout(sid)\r\n            end\r\n        else\r\n            error()\r\n        end\r\n    end\r\n    local midnight = os.time({\r\n        year = os.date(\"%Y\"),\r\n        month = os.date(\"%m\"),\r\n        day = os.date(\"%d\"),\r\n        hour = 0,\r\n        min = 0\r\n    })\r\n    local data = {\r\n        destDev = {},\r\n        key = 28672,\r\n        tStart = midnight,\r\n        tEnd = midnight + 86400\r\n    }\r\n    data = json.encode(data)\r\n    data = data:gsub(\"{}\", \"[]\") -- tiny hack\r\n    self.http:post('/dyn/getLogger.json?sid=' .. sid, data, success, error)\r\nend\r\n\r\nfunction SMA:logout(sid, callback, fail)\r\n    local error = function(error)\r\n        QuickApp:error(json.encode(error))\r\n        if fail ~= nil then\r\n            fail(error)\r\n        end\r\n    end\r\n    local success = function(response)\r\n        local data = string.gsub(response.data, \"null\", \"0\") -- another hack\r\n        local json = json.decode(data)\r\n        if (json.result.isLogin == false) then\r\n            self.sid = false\r\n            if SMA.debug then\r\n                QuickApp:debug(sid .. \" successfully logged out\")\r\n            end\r\n            if callback ~= nil then\r\n                callback()\r\n            end\r\n        else\r\n            error(\"Unable to logout \" .. sid)\r\n        end\r\n    end\r\n    self.http:post('/dyn/logout.json?sid=' .. sid, '{}', success, error)\r\nend\r\n\r\nSMA.POWER_CURRENT = '6100_40263F00'\r\nSMA.POWER_MAXIMUM = '6100_00411E00'\r\nSMA.YIELD_TOTAL = '6400_00260100'"},{"name":"Config","isMain":false,"isOpen":true,"content":"--[[\r\nConfiguration handler\r\n@author ikubicki\r\n]]\r\nclass 'Config'\r\n\r\nfunction Config:new(app)\r\n    self.app = app\r\n    self:init()\r\n    return self\r\nend\r\n\r\nfunction Config:getRight(alternative)\r\n    if self.right and self.right:len() > 3 then\r\n        return self.right\r\n    end\r\n    return alternative\r\nend\r\n\r\nfunction Config:getPassword()\r\n    return self.password\r\nend\r\n\r\nfunction Config:getUrl()\r\n    return self.url\r\nend\r\n\r\nfunction Config:getTimeoutInterval()\r\n    return tonumber(self.interval) * 60000\r\nend\r\n\r\nfunction Config:getDataType()\r\n    return self.dataType\r\nend\r\n\r\nfunction Config:setDataType(dataType)\r\n    if string.len(self.dataType) > 3 then\r\n        return false\r\n    end\r\n    self.app:setVariable(\"Data Type\", dataType)\r\n    self.dataType = dataType\r\nend\r\n\r\n--[[\r\nThis function takes variables and sets as global variables if those are not set already.\r\nThis way, adding other devices might be optional and leaves option for users, \r\nwhat they want to add into HC3 virtual devices.\r\n]]\r\nfunction Config:init()\r\n    self.right = self.app:getVariable('Right')\r\n    self.password = self.app:getVariable('Password')\r\n    self.url = self.app:getVariable('URL')\r\n    self.interval = self.app:getVariable('Refresh Interval')\r\n    self.dataType = self.app:getVariable('Data Type')\r\n\r\n    local storedRight = Globals:get('sma_right', '')\r\n    local storedPassword = Globals:get('sma_password', '')\r\n    local storedUrl = Globals:get('sma_url', '')\r\n    local storedInterval = Globals:get('sma_interval', '')\r\n    -- handling right (username)\r\n    if string.len(self.right) < 4 and string.len(storedRight) > 3 then\r\n        self.app:setVariable(\"Right\", storedRight)\r\n        self.right = storedRight\r\n    elseif (storedRight == '' and self.right) then -- or storedRight ~= self.right then\r\n        Globals:set('sma_right', self.right)\r\n    end\r\n    -- handling password\r\n    if string.len(self.password) < 4 and string.len(storedPassword) > 3 then\r\n        self.app:setVariable(\"Password\", storedPassword)\r\n        self.password = storedPassword\r\n    elseif (storedPassword == '' and self.password) then -- or storedPassword ~= self.password then\r\n        Globals:set('sma_password', self.password)\r\n    end\r\n    -- handling URL\r\n    if string.len(self.url) < 4 and string.len(storedUrl) > 3 then\r\n        self.app:setVariable(\"URL\", storedUrl)\r\n        self.url = storedUrl\r\n    elseif (storedUrl == '' and self.url) then -- or storedUrl ~= self.url then\r\n        Globals:set('sma_url', self.url)\r\n    end\r\n    -- handling interval\r\n    if not self.interval or self.interval == \"\" then\r\n        if storedInterval and storedInterval ~= \"\" then\r\n            self.app:setVariable(\"Refresh Interval\", storedInterval)\r\n            self.interval = storedInterval\r\n        else\r\n            self.interval = \"1\"\r\n        end\r\n    end\r\n    if (storedInterval == \"\" and self.interval ~= \"\") then -- or storedInterval ~= self.interval then\r\n        Globals:set('sma_interval', self.interval)\r\n    end\r\nend"},{"name":"Globals","isMain":false,"isOpen":true,"content":"--[[\r\nGlobal variables handler\r\n@author ikubicki\r\n]]\r\nclass 'Globals'\r\n\r\nfunction Globals:get(name, alternative)\r\n    local response = api.get('/globalVariables/' .. name)\r\n    if response then\r\n        local char = string.sub(response.value, 1, 1)\r\n        if char == '{' or char == '\"' then\r\n            return json.decode(response.value)\r\n        end\r\n        return response.value\r\n    end\r\n    return alternative\r\nend\r\n\r\nfunction Globals:set(name, value)\r\n    local response = api.put('/globalVariables/' .. name, {\r\n        name = name,\r\n        value = json.encode(value)\r\n    })\r\n    if not response then\r\n        response = api.post('/globalVariables', {\r\n            name = name,\r\n            value = json.encode(value)\r\n        })\r\n        \r\n    end\r\n    if response ~= nil then\r\n        if response.type == 'ERROR' then\r\n            QuickApp:error('GLOBALS ERROR[' .. response.reason .. ']:', response.message)\r\n        end\r\n    end\r\nend"}]}